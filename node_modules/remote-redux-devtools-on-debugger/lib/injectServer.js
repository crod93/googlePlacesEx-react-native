'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.revert = exports.inject = exports.fullPath = exports.file = exports.dir = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var name = 'remote-redux-devtools-on-debugger';
var startFlag = '/* ' + name + ' start */';
var endFlag = '/* ' + name + ' end */';
var serverFlag = '    _server(argv, config, resolve, reject);';

var dir = exports.dir = 'local-cli/server';
var file = exports.file = 'server.js';
var fullPath = exports.fullPath = _path2.default.join(dir, file);

var inject = exports.inject = function inject(modulePath, options) {
  var filePath = _path2.default.join(modulePath, fullPath);
  if (!_fs2.default.existsSync(filePath)) return false;

  var opts = _extends({}, options, { runserver: true, injectdebugger: false });
  var code = [startFlag, '    require("' + name + '")(' + JSON.stringify(opts) + ')', '      .then(_remotedev =>', '        _remotedev.on("ready", () => {', '          if (!_remotedev.portAlreadyUsed) console.log("-".repeat(80));', '      ' + serverFlag, '        })', '      );', endFlag].join('\n');

  var serverCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = serverCode.indexOf(startFlag); // already injected ?
  var end = serverCode.indexOf(endFlag) + endFlag.length;
  if (start === -1) {
    start = serverCode.indexOf(serverFlag);
    end = start + serverFlag.length;
  }
  _fs2.default.writeFileSync(filePath, serverCode.substr(0, start) + code + serverCode.substr(end, serverCode.length));
  return true;
};

var revert = exports.revert = function revert(modulePath) {
  var filePath = _path2.default.join(modulePath, fullPath);
  if (!_fs2.default.existsSync(filePath)) return false;

  var serverCode = _fs2.default.readFileSync(filePath, 'utf-8');
  var start = serverCode.indexOf(startFlag); // already injected ?
  var end = serverCode.indexOf(endFlag) + endFlag.length;
  if (start !== -1) {
    _fs2.default.writeFileSync(filePath, serverCode.substr(0, start) + serverFlag + serverCode.substr(end, serverCode.length));
  }
  return true;
};